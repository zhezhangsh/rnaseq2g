x <- system.time(a <- DeRNAseq(ct[1:1000, ], grps, mthds='DeBaySeq', min.count = 6)[[2]][[1]])
x
100*180
10*180
x <- system.time(a <- DeRNAseq(ct, grps, mthds='DeBaySeq', min.count = 6)[[2]][[1]])
x
names(stat)
stat <- readRDS('stat.rds')
b <- stat$DeBaySeq
dim(b)
dim(a)
plot(a[, 5], b[, 5])
hist(a[, 5], br=100)
hist(b[, 5], br=100)
hist(a[, 5], br=100)
head(a)
head(b)
stat$DeBaySeq <- a
saveRDS(stat, 'stat.rds')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
install_github('zhezhangsh/DEGandMore')
install_github('zhezhangsh/DEGandMore')
args(DeTSPM)
detach("package:DEGandMore", unload=TRUE)
library("DEGandMore", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
install_github('zhezhangsh/DEGandMore')
detach("package:DEGandMore", unload=TRUE)
library("DEGandMore", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
x <- system.time(a <- DeRNAseq(ct, grps, mthds='DeTSPM', min.count = 6)[[2]][[1]])
install_github('zhezhangsh/DEGandMore')
detach("package:DEGandMore", unload=TRUE)
detach("package:DEGandMore", unload=TRUE)
install_github('zhezhangsh/DEGandMore')
x <- system.time(a <- DeRNAseq(ct, grps, mthds='DeTSPM', min.count = 6)[[2]][[1]])
library("DEGandMore", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
x <- system.time(a <- DeRNAseq(ct, grps, mthds='DeTSPM', min.count = 6)[[2]][[1]])
DeMethods()
DeRNAseqMethods()
x <- system.time(a <- DeTSPM(ct, grps))
x
length(s)
length(stat)
dim(p)
p <- sapply(stat, function(x) x[, 5])
dim(p)
a <- a[rownames(p), ]
dim(a)
head(a)
a <- a[[1]]
hist(a[, 5], br=100)
dim(a)
a <- a[rownames(p), ]
dim(a)
r <- cor(a[, 5], p)
r <- cor(a[, 5], p, method='spearman')
r
sort(r)
r <- as.vector(r)
r
names(r) <- names(stat)
sort(r)
DeMethodMeta['DeLMGene', ]
install_github('zhezhangsh/DEGandMore')
data("DeMethodMeta")
dim(DeMethodMeta)
DeMethodMeta[,1:7]
table(DeMethodMeta[, 7])
rownames(DeMethodMeta)
sort(rownames(DeMethodMeta))
install.packages(c("sp","pixmap", "snowfall", "VGAM", "mclust", "logcondens", "Iso","XML","rgl"));
source("http://www.math.ntnu.no/inla/givemeINLA.R");
install.packages(c("sp", "pixmap", "snowfall", "VGAM", "mclust",
install.packages(c("sp","pixmap", "snowfall", "VGAM", "mclust", "logcondens", "Iso","XML","rgl"));
install.packages(X11)
install.packages('X11')
source("http://www.math.ntnu.no/inla/givemeINLA.R");
library(rgl)
q()
install.packages('rgl')
q()
install.packages('rgl')
library(rgl)
library("devtools"); install_github("markvdwiel/ShrinkBayes")
q()
library("devtools"); install_github("markvdwiel/ShrinkBayes")
q()
library("devtools"); install_github("markvdwiel/ShrinkBayes")
q()
library("devtools"); install_github("markvdwiel/ShrinkBayes")
library(devtools)
install_local('~/project/2016-10_BrainTumors/ShrinkBayes/')
?exportPattern
setwd("~/project/2016-10_BrainTumors/ShrinkBayes/R")
setwd("~/project/2016-10_BrainTumors")
install_local('ShrinkBayes/')
dir('ShrinkBayes/', rec=TRUE)->f
length(f)
f
lns <- lapply(f, readLines)
setwd('ShrinkBayes/')
lns <- lapply(f, readLines)
lns[[1]]
lns[[2]]
lns <- lapply(lns, function(x) x[grep('rgl'), x])
lns <- lapply(lns, function(x) x[grep('rgl', x)])
lns[[1]]
names(lns) <- f
n <- sapply(lns, length)
n
table(n)
f[n>0]
library(rgl)
library(logcondens)
install.packages('logcondens')
library(logcondens)
library(Iso)
install_local('ShrinkBayes/')
setwd('..')
install_local('ShrinkBayes/')
library(ShrinkBayes)
setwd('ShrinkBayes/')
lns <- lapply(f, readLines)
lns <- lapply(lns, function(x) x[grep('logcondens', x)])
n <- sapply(lns, length)
table(n)
f[n>0]
install.packages('logcondens')
install.packages("logcondens")
lns <- lapply(lns, function(x) x[grep('logcondens', x)])
lns <- lapply(lns, function(x) x[grep('NonParaUpdatePrior', x)])
n <- sapply(lns, length)
f[n>0]
q()
setwd("~/project/2016-10_BrainTumors")
library(ShrinkBayes)
library(ShrinkBayes)
data(CAGEdata10000)
CAGEdata <- CAGEdata10000
CAGEdata <- CAGEdata[1:1000,]
data(design_brain)
design_brain
pers <- design_brain$pers  #persons
batch <-design_brain$batch   #batch
groupfac <- design_brain$groupfac #group (= brain region)
ncpus2use <- 10
groupfac <- BaselineDef("groupfac",baselinegroup="1")
lincombvec <- AllComp("groupfac")
form = y ~ 1 + groupfac + batch + f(pers,model="iid")
shrinksimul <- ShrinkSeq(form=form, dat=CAGEdata,shrinkfixed="groupfac", shrinkrandom="pers",mixtdisp=TRUE,ncpus=ncpus2use)
shrinksimul <- ShrinkSeq(form=form, dat=CAGEdata[1:20, ],shrinkfixed="groupfac", shrinkrandom="pers",mixtdisp=TRUE,ncpus=ncpus2use)
str(shrinksimul)
data(De)
library(DEGandMore)
data(De)
prepared <- PrepareDe(mtrx, grps, paired);
mtrx     <- prepared[[1]];
grps     <- prepared[[2]];
paired   <- prepared[[3]];
e <- log2(mtrx+1)
prepared <- PrepareDe(mtrx, grps, paired);
mtrx     <- prepared[[1]];
grps     <- prepared[[2]];
paired   <- prepared[[3]];
n   <- sapply(grps, length);
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=e[1:10, ], form=frm, ncpus2use = 2);
inla.expectation
library(INLA)
data(inla.expectation)
source("http://www.math.ntnu.no/inla/givemeINLA.R")
inla.upgrade()
q()
library(INLA)
data(inla.upgrade())
library(DEGandMore)
data(De)
require(DEGandMore);
require(ShrinkBayes);
prepared <- PrepareDe(mtrx, grps, paired);
mtrx     <- prepared[[1]];
grps     <- prepared[[2]];
paired   <- prepared[[3]];
n   <- sapply(grps, length);
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=e[1:100, ], form=frm, ncpus2use = 2);
e <- log2(mtrx+1)
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=e[1:100, ], form=frm, ncpus2use = 2);
data(inla.expectation)
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=e[1:100, ], form=frm, ncpus2use = 2, approx0=TRUE);
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=mtrx[1:100, ], form=frm, ncpus2use = 2);
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=mtrx[1:10, ], form=frm, ncpus2use = 2);
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=mtrx[1:10, ], form=frm, ncpus2use = 2, fam='zip');
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
res <- ShrinkBayesWrap(dat=mtrx[1:10, ], form=frm, ncpus2use = 2, fam='zinb');
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
system.time(res <- ShrinkBayesWrap(dat=mtrx[1:10, ], form=frm, ncpus2use = 2, fam='zinb'))
4*20000
4*20000/3600
des <- factor(rep(1:2, n));
frm <- ~ 1 +  des;
system.time(res <- ShrinkBayesWrap(dat=mtrx[1:10, ], form=frm, ncpus2use = 10, fam='zinb'))
library(ShrinkBayes)
data(CAGEdata10000)
CAGEdata <- CAGEdata10000
CAGEdata <- CAGEdata[1:1000,]
CAGEdata[1:2,]
data(design_brain)
design_brain
pers <- design_brain$pers  #persons
batch <-design_brain$batch   #batch
groupfac <- design_brain$groupfac #group (= brain region)
ncpus2use <- 10
groupfac <- BaselineDef("groupfac",baselinegroup="1")
lincombvec <- AllComp("groupfac")
form = y ~ 1 + groupfac + batch + f(pers,model="iid")
system.time(shrinksimul <- ShrinkSeq(form=form, dat=CAGEdata[1:10, ],shrinkfixed="groupfac", shrinkrandom="pers",mixtdisp=TRUE,ncpus=ncpus2use));
shrinksimul
str(shrinksimul)
data(De)
prepared <- PrepareDe(mtrx, grps, paired);
mtrx     <- prepared[[1]];
grps     <- prepared[[2]];
paired   <- prepared[[3]];
n   <- sapply(grps, length);
grp <- factor(rep(1:2), n);
grp <- BaselineDef("grp",baselinegroup="1")
per <- 1:sum(n);
frm <- y ~ 1 + grp + f(per, model='iid');
system.time(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=ncpus2use));
grp <- factor(rep(1:2), n);
n   <- sapply(grps, length);
grp <- factor(rep(1:2, n));
grp <- BaselineDef("grp",baselinegroup="1")
per <- 1:sum(n);
frm <- y ~ 1 + grp + f(per, model='iid');
system.time(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=ncpus2use));
system.time(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=2));
system.time(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", mixtdisp=TRUE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ], mixtdisp=TRUE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ], mixtdisp=FALSE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=2)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=1)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1)));
args(ShrinkSeq)
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1, maxiter=5)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:10, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1, maxiter=3)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1, maxiter=3)));
system.time(suppressMessages(shrinksimul <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=1, maxiter=3)));
shrinksimul$pmlist$mixp
str(shrinksimul)
prepared <- PrepareDe(mtrx, grps, paired);
mtrx     <- prepared[[1]];
grps     <- prepared[[2]];
paired   <- prepared[[3]];
n   <- sapply(grps, length);
grp <- factor(rep(1:2, n));
grp <- BaselineDef("grp",baselinegroup="1")
lin <- AllComp("grp")
per <- 1:sum(n);
frm <- y ~ 1 + grp + f(per, model='iid');
system.time(sim <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=ncpus2use));
system.time(sim <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,maxiter=5, ncpus=ncpus2use));
system.time(sim <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,maxiter=5, ncpus=1));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zinb",sim,ncpus=1,lincomb=lin));
str(fit)
?FitAllShrink
?CombinePosteriors
system.time(fit2 <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zip",sim,ncpus=1,lincomb=lin));
cp <- CombinePosteriors(fit,fit2,sim,para="grp", ncpus=1)
cp
str(cp)
str(fit)
str(fit2)
fit$res
lin
lincombvec <- AllComp("grp")
grp
str(sim)
system.time(suppressMessages(sim <- ShrinkSeq(form=frm, dat=mtrx[1:100, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=TRUE,ncpus=1, maxiter=3)));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:100, ],fams="zinb",sim,ncpus=1,lincomb=lin));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:100, ],fams="zinb",sim,ncpus=1,lincomb=lin, verbose=TRUE));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:100, ],fams="zip",sim,ncpus=1,lincomb=lin, verbose=TRUE));
system.time(suppressMessages(sim <- ShrinkSeq(form=frm, dat=mtrx[1:20, ],shrinkfixed="grp", shrinkrandom="per",mixtdisp=FALSE,ncpus=1, maxiter=15)));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zinb",sim,ncpus=1,lincomb=lin, verbose=TRUE));
library(ShrinkBayes)
data(CAGEdata10000)
CAGEdata <- CAGEdata10000
CAGEdata <- CAGEdata[1:1000,]
CAGEdata[1:2,]
data(design_brain)
design_brain
pers <- design_brain$pers  #persons
batch <-design_brain$batch   #batch
groupfac <- design_brain$groupfac #group (= brain region)
ncpus2use <- 10
groupfac <- BaselineDef("groupfac",baselinegroup="1")
lincombvec <- AllComp("groupfac")
form = y ~ 1 + groupfac + batch + f(pers,model="iid")
system.time(sim <- ShrinkSeq(form=form, dat=CAGEdata[1:20, ],shrinkfixed="groupfac", shrinkrandom="pers",mixtdisp=FALSE,maxiter=5, ncpus=1));
system.time(fit <- FitAllShrink(from,dat=CAGEdata[1:20, ],fams="zinb",sim,ncpus=1,lincomb=lincombvec, verbose=F));
form = y ~ 1 + groupfac + batch + f(pers,model="iid")
system.time(fit <- FitAllShrink(form,dat=CAGEdata[1:20, ],fams="zinb",sim,ncpus=1,lincomb=lincombvec, verbose=F));
str(fit)
form = y ~ 1 + groupfac + batch + f(pers,model="iid")
lincombvec
lin
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zinb",sim,ncpus=1, verbose=F));
str(fit)
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zinb",sim,ncpus=1, lincombvec=lin));
system.time(fit <- FitAllShrink(frm,dat=mtrx[1:20, ],fams="zinb",sim,ncpus=1, lincombvec=lin));
system.time(fit <- FitAllShrink(frm,mtrx[1:20, ],fams="zinb",sim,ncpus=1));
names(fit)
names(fit[[1]])
length(fit[[1]])
fit[[1]][[1]]
fit[[1]][[1]]->x
names(x)
sort(names(x))
system.time(fit1 <- FitAllShrink(frm,mtrx[1:20, ],fams="zip",sim,ncpus=1));
npprior <- NonParaUpdatePrior(fitall=fit,modus="fixed", includeP0 = FALSE, shrinkpara="grp", shrinklc=TRUE,ncpus=1, maxiter = 3)
x <- CombinePosteriors(fit, fit1, sim)
x <- CombinePosteriors(fit, fit1, sim, 'grp', ncpus=1)
x
str(x)
length(x)
names(x)
names(x[[1]])
x[[1]][[1]]
x[[1]][[10]]
x[[1]][[10]]->y
colMeans(y)
y[[1]]
colMeans(y[[1]])
z <- sapply(x[[1]], function(x) colMeans(x[[1]]))
z
z <- t(z)
z
names9x
names(x)
length(x[[1]])
x[[2]]
pri <- MixtureUpdatePrior(fit)a
pri <- MixtureUpdatePrior(fit)
pri <- MixtureUpdatePrior(fit, shrinkpara='grp')
pri <- MixtureUpdatePrior(fit, shrinklc ='grp')
pri <- MixtureUpdatePrior(fit1, shrinklc ='grp')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
DeT
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("/srv/shiny-server/rnaseq_2g/log/2016-10-27")
dir(rec=T)
getwd()
dir('b87ed251a793f6a5e9003be834f0f7b3')
dir('480b0c46d47b887cbfe9ba450b6fac41')
dir('480b0c46d47b887cbfe9ba450b6fac41')->f
f <-f[grep('De', f)]
f
length(f)
file.info(f)
file.info(paste('480b0c46d47b887cbfe9ba450b6fac41', f, sep='/'))
file.info(paste('480b0c46d47b887cbfe9ba450b6fac41', f, sep='/'))->x
x <- x[order(x[, 'ctime']), ]
x
ct <- readRDS('480b0c46d47b887cbfe9ba450b6fac41/count.rds')
gp <- readRDS('480b0c46d47b887cbfe9ba450b6fac41/group.rds')
de <- rownames(DeMethodMeta)
de
for (i in 1:length(de))
res <- list()
for (i in 1:length(de)) {print(de); res[[i]] <- DeRNAseq(ct, gp, mthds=de[i], )[[2]]; }
for (i in 1:length(de)) {res[[i]] <- DeRNAseq(ct, gp, mthds=de[i], )[[2]]; }
i
de[20]
res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds=de[i], )[[2]];
res[[i]] <- DeRNAseq(ct[1:1000, ], gp, mthds=de[i], )[[2]];
f
dir(rec=T)
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')->f
f <- f[grep('De', f)]
f <- paste('cc9ac90c0bc9ce1dd0b7177c88914f5d', f, sep='/')
stat <- lapply(f, readRDS)
dim(stat[[1]])
sapply(stat, nrow)
f
nm <- sub('cc9ac90c0bc9ce1dd0b7177c88914f5d/', '', f)
f
nm <- sub('.rds', '', f)
nm <- sub('cc9ac90c0bc9ce1dd0b7177c88914f5d/', '', f)
nm <- sub('.rds', '', nm)
nm
names(stat) <- nm
dim(ct)
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')
input <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/inputs.rds')
names(input)
dim(input[[1]])
ct <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/count_6.rds')
gp <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/group_6.rds')
system.time(res[[i]] <- DeRNAseq(ct[1:1000, ], gp, mthds='DeAldex2', )[[2]])
devtools::install_github('zhezhangsh/DEGandMore')
DeAldex2
args(DeAldex2)
system.time(res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds='DeAldex2', )[[2]])
system.time(res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds='DeAldex2', useMC=TRUE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:100, ], gp, useMC=TRUE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=FALSE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=TRUE)[[2]]
names(gp)
names(gp)
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=TRUE)[[2]])
setdiff(de, names(stat))
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat)))
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat))[1:3])
length(x)
names(x)
x <- x[[2]]
names(x)
dim(x[[1]])
dim(stat[[1]])
sapply(x, dim)
id <- rownames(x[[1]])
length(id)
stat <- lapply(stat, function(x) x[id, ])
stat <- c(stat, x)
names(stat)
setwd("/srv/shiny-server/project")
saveRDS(stat, 'stat.rds')
saveRDS(stat, 'stat.rds')
baySeq
baySeq::groups
x <- DeBaySeq(ct[1:100, ], gp)
install_github('zhezhangsh/DEGandMore')
x <- DeBaySeq(ct[1:100, ], gp)
dim(x[[2]])
names(x)
head(x[[1]])
x[[1]][, 5]
s <- stat[[1]]
s[rownames(x[[1]]), ]
a <- x[[1]]
a <- a[rownames(a) %in% rownames(s), ]
dim(a)
s[rownames(a), ]
a['ENSG00000187730.6', ]
sort(a[, 5])
x <- DeBaySeq(ct[1:1000, ], gp)
dim(x[[1]])
hist(x[[1]][, 5])
hist(x[[1]][, 5], br=100)
sort(x[[1]][, 5])
sort(x[[1]][, 5])[1:10]
stat[[1]]['ENSG00000121905.5', ]
saveRDS(ct, file='count.rds')
saveRDS(gp, file='group.rds')
install_github('zhezhangsh/DEGandMore')
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat)))
dim(x[[1]])
dim(x[[2]][[1]])
a <- x[[2]][[1]]
dim(a)
dim(stat[[1]])
stat$DeBaySeq <- a
names(stat)
stat <- stat[rownames(DeMethodMeta)]
saveRDS(stat, 'stat.rds')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
paste(APP_HOME, "preload.R", sep='/')
APP_HOME <- "/srv/shiny-server/rnaseq_2g";
runApp('/srv/shiny-server/rnaseq_2g')
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
q()
shiny::runApp()
q)
q()
