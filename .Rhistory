names(x)
length(x[[1]])
x[[2]]
pri <- MixtureUpdatePrior(fit)a
pri <- MixtureUpdatePrior(fit)
pri <- MixtureUpdatePrior(fit, shrinkpara='grp')
pri <- MixtureUpdatePrior(fit, shrinklc ='grp')
pri <- MixtureUpdatePrior(fit1, shrinklc ='grp')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
devtools::install_github('zhezhangsh/DEGandMore')
DeT
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
setwd("/srv/shiny-server/rnaseq_2g/log/2016-10-27")
dir(rec=T)
getwd()
dir('b87ed251a793f6a5e9003be834f0f7b3')
dir('480b0c46d47b887cbfe9ba450b6fac41')
dir('480b0c46d47b887cbfe9ba450b6fac41')->f
f <-f[grep('De', f)]
f
length(f)
file.info(f)
file.info(paste('480b0c46d47b887cbfe9ba450b6fac41', f, sep='/'))
file.info(paste('480b0c46d47b887cbfe9ba450b6fac41', f, sep='/'))->x
x <- x[order(x[, 'ctime']), ]
x
ct <- readRDS('480b0c46d47b887cbfe9ba450b6fac41/count.rds')
gp <- readRDS('480b0c46d47b887cbfe9ba450b6fac41/group.rds')
de <- rownames(DeMethodMeta)
de
for (i in 1:length(de))
res <- list()
for (i in 1:length(de)) {print(de); res[[i]] <- DeRNAseq(ct, gp, mthds=de[i], )[[2]]; }
for (i in 1:length(de)) {res[[i]] <- DeRNAseq(ct, gp, mthds=de[i], )[[2]]; }
i
de[20]
res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds=de[i], )[[2]];
res[[i]] <- DeRNAseq(ct[1:1000, ], gp, mthds=de[i], )[[2]];
f
dir(rec=T)
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')->f
f <- f[grep('De', f)]
f <- paste('cc9ac90c0bc9ce1dd0b7177c88914f5d', f, sep='/')
stat <- lapply(f, readRDS)
dim(stat[[1]])
sapply(stat, nrow)
f
nm <- sub('cc9ac90c0bc9ce1dd0b7177c88914f5d/', '', f)
f
nm <- sub('.rds', '', f)
nm <- sub('cc9ac90c0bc9ce1dd0b7177c88914f5d/', '', f)
nm <- sub('.rds', '', nm)
nm
names(stat) <- nm
dim(ct)
dir('cc9ac90c0bc9ce1dd0b7177c88914f5d')
input <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/inputs.rds')
names(input)
dim(input[[1]])
ct <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/count_6.rds')
gp <- readRDS('cc9ac90c0bc9ce1dd0b7177c88914f5d/group_6.rds')
system.time(res[[i]] <- DeRNAseq(ct[1:1000, ], gp, mthds='DeAldex2', )[[2]])
devtools::install_github('zhezhangsh/DEGandMore')
DeAldex2
args(DeAldex2)
system.time(res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds='DeAldex2', )[[2]])
system.time(res[[i]] <- DeRNAseq(ct[1:100, ], gp, mthds='DeAldex2', useMC=TRUE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:100, ], gp, useMC=TRUE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=FALSE)[[2]])
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=TRUE)[[2]]
names(gp)
names(gp)
system.time(res[[i]] <- DeAldex2(ct[1:1000, ], gp, useMC=TRUE)[[2]])
setdiff(de, names(stat))
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat)))
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat))[1:3])
length(x)
names(x)
x <- x[[2]]
names(x)
dim(x[[1]])
dim(stat[[1]])
sapply(x, dim)
id <- rownames(x[[1]])
length(id)
stat <- lapply(stat, function(x) x[id, ])
stat <- c(stat, x)
names(stat)
setwd("/srv/shiny-server/project")
saveRDS(stat, 'stat.rds')
saveRDS(stat, 'stat.rds')
baySeq
baySeq::groups
x <- DeBaySeq(ct[1:100, ], gp)
install_github('zhezhangsh/DEGandMore')
x <- DeBaySeq(ct[1:100, ], gp)
dim(x[[2]])
names(x)
head(x[[1]])
x[[1]][, 5]
s <- stat[[1]]
s[rownames(x[[1]]), ]
a <- x[[1]]
a <- a[rownames(a) %in% rownames(s), ]
dim(a)
s[rownames(a), ]
a['ENSG00000187730.6', ]
sort(a[, 5])
x <- DeBaySeq(ct[1:1000, ], gp)
dim(x[[1]])
hist(x[[1]][, 5])
hist(x[[1]][, 5], br=100)
sort(x[[1]][, 5])
sort(x[[1]][, 5])[1:10]
stat[[1]]['ENSG00000121905.5', ]
saveRDS(ct, file='count.rds')
saveRDS(gp, file='group.rds')
install_github('zhezhangsh/DEGandMore')
x <- DeRNAseq(ct, gp, mthds=setdiff(de, names(stat)))
dim(x[[1]])
dim(x[[2]][[1]])
a <- x[[2]][[1]]
dim(a)
dim(stat[[1]])
stat$DeBaySeq <- a
names(stat)
stat <- stat[rownames(DeMethodMeta)]
saveRDS(stat, 'stat.rds')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
runApp('/srv/shiny-server/rnaseq_2g')
paste(APP_HOME, "preload.R", sep='/')
APP_HOME <- "/srv/shiny-server/rnaseq_2g";
runApp('/srv/shiny-server/rnaseq_2g')
q()
shiny::runApp()
shiny::runApp()
shiny::runApp()
q()
shiny::runApp()
q)
q()
devtools::install_github('zhezhangsh/DEGandMore')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('zhezhangsh/DEGandMore')
args(CombinePvalue)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?checkboxGroupInput
runApp()
runApp()
runApp()
runApp()
?
updateCheckboxGroupInput
all <- DeRNAseqMs[[1]];
sample(all, sample(1:length(all), max(2, length(all))))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?
conditionalPanel
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?radioButtons
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
character(0)
character(0)
runApp()
runApp()
x <- character(0)
length(x)
x
class(x)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
pv <-readRDS('p.rds')
dim(pv)
head(pv)
runApp()
p <- readRDS('p.rds')
dim(p)
head(p)
ph <- -log10(p)
cor(ph)[, 1]
summary(p[, 1])
summary(p)
cor(p, method='spearman')[, 1]
hist(p[, 1], br=100)
runApp()
runApp()
runApp()
x <-readRDS('p.rds')
x[[1]]
devtools::install_github('zhezhangsh/DEGandMore')
x <-readRDS('p.rds')
names(x)
head(x[[1]])
head(x[[2]])
names(x[[2]])
names(x[[2]][[2]])
runApp()
runApp()
runApp()
# session.data <- reactiveValues(id = sid, dir = dir, show = 0, run = 0, matrix = NULL, result = loaded$result);
# session.data <- reactiveValues(id = sid, dir = dir, show = 0, run = 0, matrix = NULL, result = loaded$result);
runApp()
runApp()
runApp()
runApp()
CalculateCountLog2FC()
CalculateCountLog2FC
rs <- res[[1]]
res <- readRDS('p.rds')
rs <- res[[1]]
names(rs)
length(rs)
rs <- rs[[1]]
names(rs)
rs <- rs[[2]]
rs <- res[[2]]
names(rs)
x <- rs[[1]]
names(x)
m1 <- rowMeans(rs$input$normalized$count[, rs$input$groups[[1]], drop=FALSE]);
m2 <- rowMeans(rs$input$normalized$count[, rs$input$groups[[2]], drop=FALSE]);
l2 <- log2(pmax(m2, min(m2[m2>0])/2)) - log2(pmax(m1, min(m1[m1>0])/2));
summary(l2)
head(rs[[2]][[1]])
tb <- cbind(LogFC = l2, CombinedP = pc, pv);
dim(tb)
head(tb)
pv <- sapply(rs[[2]][ms], function(x) x[, 5]);
pc <- CombinePvalue(pv, input$meta.select.method);
m1 <- rowMeans(rs$input$normalized$count[, rs$input$groups[[1]], drop=FALSE]);
m2 <- rowMeans(rs$input$normalized$count[, rs$input$groups[[2]], drop=FALSE]);
l2 <- log2(pmax(m2, min(m2[m2>0])/2)) - log2(pmax(m1, min(m1[m1>0])/2));
tb <- cbind(LogFC = l2, CombinedP = pc, pv);
runApp()
runApp()
args(CombinePvalue)
runApp()
dim(pv)
CombinePvalue(pv, 'simes')->x
length(x)
runApp()
x <- readRDS('rs.rds')
names(x)
names(x[[2]])
runApp()
p <- readRDS('p.rds')
head(p)
dim(p)
hist(p[, 1], -log10(p[, 2]))
plot(p[, 1], -log10(p[, 2]))
p[p[,2]==min(p[, 2]), ]
rownames(p)[p[,2]==min(p[, 2])]
sapply(rs[[2]], function(x) x['ENSG00000164853.8', ])
t(sapply(rs[[2]], function(x) x['ENSG00000164853.8', ]))
source('ls()')
args(source)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(WriteXLS)
.libPaths()
install.packages('WriteXLS')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('zhezhangsh/DEGandMore')
?selectizeInput
as.character(0)
charater(0)
as.character()
runApp()
as.character()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
source('source/rnaseq2g.retrieve.result.r')
res <- rnaseq2g.retrieve.result('00/ex1')
dim(res)
pv <- sapply(res[[2]], function(x) x[, 5])
dim(pv)
dim(pv)
names(res[[2]])
names(res)
res <- res[[3]]
names(res)
length(res)
res <- rnaseq2g.retrieve.result('00/ex1')
str(res)
res <- rnaseq2g.retrieve.result('log/00/ex1')
res <- res[[3]]
names(res)
res <-res[[2]]
dim(res)
length(res)
names(res)
pv <- sapply(res, function(x) x[, 5])
x <- apply(pv, 2, function(x) pmax(x, min(x[x>0])/2))
dim(x)
min(x)
pc <- CombinePvalue(x, 'fisher')
summary(pc)
length(pc[pc==0])
min(pc)
hist(pc, br=100)
runApp()
dim(pv)
pc <- CombinePvalue(pv, 'fisher')
summary(pc)
length(pc[pc==0])
pc[pc==0]
pv[pc==0]
pv[pc==0, ]
pv[pc==0, ][1,]
pv[pc==0, ][1,]->a
as.vector(a)
as.vector(a)->a
sort(a)
min(a)
devtools::install_github('zhezhangsh/DEGandMore')
pc <- CombinePvalue(pv, 'fisher')
length(pc)
in(pc)
min(pc)
length(pc[pc==0])
max(pc)
x
x <- pv[pc==0, ][1, ]
x
x <- as.vector(x)
x
min(x)
pv[is.na(pv)] <- 1;
pv[pv==0] <- min(pv[pv>0])*0.5
pv[pv==0] <- min(pv[pv>0]); # minimum possible value
min(pv)
pc <- CombinePvalue(pv, 'fisher')
min(pc)
length(pc[pc==0])
x <- pv[pc==0, ][1, ]
x <- as.vector(x)
sort(x)
chi <- -2*log(x)
chi
chi <- sum(chi)
chi
pchisq(chi, 50)
pchisq(chi, 50, lower.tail = FALSE)
pchisq(chi, 50, lower.tail = FALSE, log.p = TRUE)
exp(pchisq(chi, 50, lower.tail = FALSE, log.p = TRUE))
runApp()
?setProgress
runApp()
runApp()
runApp()
runApp()
runApp()
q()
