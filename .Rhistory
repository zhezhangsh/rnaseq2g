fn0 <- fns[file.exists(fns)];
mts <- mth[file.exists(fns)];
if (length(fn0) == 0) {
msg <- "None of the selected DE methods have been finished.";
res <- NULL;
} else {
if (length(fns) == 1) {
msg <- "The single selected DE method has been finished"
} else if (length(fn0) == length(fns)) {
msg <- paste('All', length(fns), 'selected DE methods have been finished.')
} else if (length(fn0) == 1) {
msg <- paste('1 of', length(fns), 'selected DE methods has been finished.')
} else {
msg <- paste(length(fn0), 'of', length(fns), 'selected DE methods has been finished.')
}
msg <- c(paste('<font color="blue">', msg, '</font>', sep=''),
paste('Analysis ID: ', '<font color="darkgreen"><b>', id, '</b></font>', sep=''),
paste('Number of samples: ', '<font color="darkgreen"><b>', ncol(inp$filtered), '</b></font>', sep=''),
paste('Number of genes: ', '<font color="darkgreen"><b>', nrow(inp$filtered), '</b></font>', sep=''))
runApp()
runApp()
dir('2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624')
dir('2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624')
dir()
dir('log/2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624')
file.rename('log/2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624', 'log/0000/ex_1')
getwd()
'/srv/shiny-server/rnaseq_2g_zhangz/log/2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624'
dir.create('log/00')
file.rename('log/2016-10-05/38b8fe9203dfd4bb9b02ae5c9ac6a624', 'log/00/ex_1')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tbl <- cbind(c('Analysis ID', 'Number of DE methods', 'Number of samples', 'Number of genes'),
c(id, length(inp$methods), ncol(inp$filtered), nrow(inp$filtered)));
tbl
?kable
knitr::kable()
knitr::kable(tbl, row.names = FALSE, col.names = FALSE, align = c('r', 'l'))
tbl
knitr::kable(tbl, row.names = FALSE, col.names = FALSE, align = c('r', 'l'))
dimnames(tbl) <- list(1:4, 1:2);
knitr::kable(tbl, row.names = FALSE, col.names = FALSE, align = c('r', 'l'))
tbl
', 'Number of DE methods', 'Number of samples', 'Number of genes'),
c(id, length(inp$meth
tbl <- data.frame(c('Analysis ID', 'Number of DE methods', 'Number of samples', 'Number of genes'),
c(id, length(inp$methods), ncol(inp$filtered), nrow(inp$filtered)));
tbl <- data.frame(c('Analysis ID', 'Number of DE methods', 'Number of samples', 'Number of genes'),
c(id, length(inp$methods), ncol(inp$filtered), nrow(inp$filtered)));
tbl
knitr::kable(tbl)
knitr::kable(tbl, col.names = FALSE)
knitr::kable(tbl, col.names = c('', ''))
runApp()
runApp()
runApp()
?
knitr::kable
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?p
runApp()
runApp()
msg <- c('<font color="blue";>Results successfully loaded from local file: ', rnaseq2g.summarize.result(res$input, 'user') );
length(mgs)
msg
runApp()
runApp()
runApp()
getwd()
runApp()
runApp()
runApp()
x <- readRDS('log/00/ex_1/DeAbsSeq.rds')
dim(x)
head(x)
head(x)
x <- readRDS('log/00/ex_1/DeAbsSeq.rds')
runApp()
length(res[[2]])
x <- sapply(res[[2]], colnames)
x
x[3, ]
dim(x)
runApp()
data(De)
dim(mtrx)
head(mtrx)
grps
system.time(stat <- DeRNA(mtrx, grps, mthds=4))
system.time(stat <- DeRNAseq(mtrx, grps, mthds=4))
runApp()
runApp()
DeLMGene
DeLimma
DeEdgeR()
DeEdgeR
DeEdgeRun
DeEbSeq
DeDeSeq2
runApp()
runApp()
devtools::install_github('zhezhangsh/DEGandMore')
q()
setwd("~/")
setwd("/srv/shiny-server/rnaseq_2g_zhangz")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
library(mail)
install.packages('mail')
library(mail)
sendmail('zhangz@email.chop.edu', subject='test1')
sendmail('zhangz@email.chop.edu', subject='test1')
sendmail('zhangz@email.chop.edu', subject='test2')
for (i in 1:20) sendmail('zhangz@email.chop.edu', subject='test2')
sendmail('zhangz@email.chop.edu', subject='test2')
sendmail('zhezhangsh@hotmail.com', subject='test2')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('zhezhangsh/DEGandMore')
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
devtools::install_github('zhezhangsh/DEGandMore')
runApp()
runApp()
runApp()
runApp()
setwd("/srv/shiny-server/rnaseq_2g_zhangz")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
writeLines(NULL, 'test')
?writeLines
?file.create
'a'/2
tryCatch('a'/2, error=function(e) {print(1), as.character(e)})
tryCatch({'a'/2}, error=function(e) {print(1), as.character(e)})
tryCatch({'a'/2}, error=function(e) {print(1); as.character(e)})
runApp()
file.create('a')
read.table(a)
read.table('a')
readLines(a)
readLines('a')
dir <- 'log/2016-10-06/9401dc543c869c493fa817e33eb4940a/status.txt'
ln <- readLines(paste(dir, 'status.txt', sep='/'));
dir <- 'log/2016-10-06/9401dc543c869c493fa817e33eb4940a'
ln <- readLines(paste(dir, 'status.txt', sep='/'));
ln
strsplit(ln, '\t')
sapply(strsplit(ln, '\t'), function(x) x[2])
st <- as.integer(sapply(strsplit(ln, '\t'), function(x) x[2]));
st
runApp()
runApp()
runApp()
ln
ln <- ln[ln=='']
ln
st <- as.integer(sapply(strsplit(ln, '\t'), function(x) x[2]));
st
length(st[st==0])
if (length(st) == 0) e <- 'None of the DE methods generated errors:') else
if (length(st) == 1) e <- 'One of the DE methods generated errors:' else
paste(length(st), 'of the DE methods generated errors:')
e <- 'None of the DE methods generated errors:' else if (length(st) == 1)
e <- 'One of the DE methods generated errors:' else
e <- paste(length(st), 'of the DE methods generated errors:');
runApp()
?navbarPage
runApp()
runApp()
runApp()
runApp()
runApp()
setwd("/srv/shiny-server/rnaseq_2g")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
q()
q()
setwd("~/project/2016-10_SEQC")
rchive::ProcessGEO('GSE47774')
.libPaths()
BiocInstaller::biocLite('GEOquery')
rchive::ProcessGEO('GSE47774')
rchive::ProcessGEO('GSE47774', getwd())
rchive::ProcessGEO
gse.id <- 'GSE47774'
path.out <- getwd()
affy.supp = TRUE
gsm.ids = c()
library(affy)
if (length(gsm.ids) > 0)
path <- ParseGSM(gsm.ids, paste(path.out, gse.id, sep = "/"),
affy.supp)
else path <- ParseGSE(gse.id, path.out, affy.supp)
if (length(gsm.ids) > 0)
path <- ParseGSM(gsm.ids, paste(path.out, gse.id, sep = "/"),
affy.supp) else path <- ParseGSE(gse.id, path.out, affy.supp)
library(rchive)
if (length(gsm.ids) > 0)
path <- ParseGSM(gsm.ids, paste(path.out, gse.id, sep = "/"),
affy.supp) else path <- ParseGSE(gse.id, path.out, affy.supp)
path.smp <- paste(path, gse.id, sep = "/")
if (length(gsm.ids) == 0)
untar(paste(path.smp, "/", gse.id, "_RAW.tar", sep = ""),
exdir = path.smp)
fn.cel <- dir(path.smp)
fn.cel <- paste(path.smp, fn.cel[grep(".CEL.gz$", fn.cel,
ignore.case = TRUE)], sep = "/")
fn.cel
dir(fn.cel)
setwd("~/project/2016-10_SEQC/GEO")
rchive::ProcessGEO('GSE47774', getwd(), FALSE)
rchive::ProcessGEO('GSE47774', getwd())
setwd("~/project/2016-10_SEQC/GEO/GSE47774-GPL11154/GSE47774")
ct <-readRDS('GSE47774_SEQC_ILM_AGR.txt.gz', sep='\t', row=1, head=T)
ct <-read.table('GSE47774_SEQC_ILM_AGR.txt.gz', sep='\t', row=1, head=T)
dim(ct)
head(ct)
load("~/project/2016-10_SEQC/GEO/GSE47774-GPL11154/phen.rdata")
phen[1:2, ]
BiocInstaller::biocLite('seqc')
x <- seqc.samples()
library(seqc)
x <- seqc.samples()
dim(x)
x
x <- seqc.samples('gene')
dim(x)
x <- seqc.samples('gene', 'refseq', 'ILM', 'AGR')
dim(x)
x
library("seqc", lib.loc="~/R/x86_64-pc-linux-gnu-library/3.3")
x <- seqc.samples('gene', 'refseq', 'ILM', 'AGR')
dim(x)
x
x <- ILM_aceview_gene_AGR
dim(x)
x[1:2, ]
x[, 1][1:100]
library(mailR)
library(mail)
setwd("/srv/shiny-server/rnaseq_2g")
setwd("/srv/shiny-server/rnaseq_2g/doc")
setwd("/srv/shiny-server/rnaseq_2g")
host.name    <- "smtp.gmail.com";
user.name    <- "txofmitodys@gmail.com";
passwd       <- "GSE42986";
port         <- 587;
ssl          <- TRUE;
authenticate <- TRUE;
mail.to <- "zhangz@email.chop.edu";
subject <- "[No Reply] RNA-seq 2G analysis is done."
body <- c(
'<p><font color="red">text1</font></p>',
'<p><font color="blue">text1</font></p>',
);
send.mail(from = user.name, to = mail.to, subject=subject, body = body, html = TRUE, authenticate = TRUE, send = TRUE,
smtp = list(host.name = host.name, port = port, user.name = user.name, passwd = password, ssl = TRUE))
install.packages('mailR')
install.packages('rJava')
library(rJava)
q()
library(rJava)
.libPaths()
dir(.libPaths()[1])
dir(.libPaths()[2])
dir(.libPaths()[3])
.libPaths()
dir(.libPaths()[1])
args(library)
q()
rnaseq2g.send.email <- function(mail.to, analysis.id) {
require(mailR)
host.name    <- "smtp.gmail.com";
user.name    <- "txofmitodys@gmail.com";
password     <- "GSE42986";
port         <- 587; #587 25 465
ssl          <- TRUE;
authenticate <- TRUE;
subject <- "[No Reply] RNA-seq 2G analysis is done."
body <- c(
paste('<p style="font-size:16px; color:blue">', analysis.id, '</font></p>', sep=''),
'<p><b><i>RNA-seq 2G</i></b> has finished the analysis above.</p>',
'<p>Go to <a href="http://rnaseq2g.awsomics.org">http://rnaseq2g.awsomics.org</a>, open the <b>[Result]</b> page, and enter the analysis ID to load results.</p>'
);
body <- paste(body, collapse='\n');
send.mail(from = user.name, to = mail.to, subject=subject, body = body, html = TRUE, authenticate = TRUE, send = TRUE,
smtp = list(host.name = host.name, port = port, user.name = user.name, passwd = password, ssl = TRUE));
}
rnaseq2g.send.email('zhangz@email.chop.edu', 'abc')
rnaseq2g.send.email('zhangz@email.chop.edu', 'abc')
q()
rnaseq2g.send.email <- function(mail.to, analysis.id) {
require(mailR)
host.name    <- "smtp.gmail.com";
user.name    <- "txofmitodys@gmail.com";
password     <- "GSE42986";
port         <- 587; #587 25 465
ssl          <- TRUE;
authenticate <- TRUE;
subject <- "[No Reply] RNA-seq 2G analysis is done."
body <- c(
paste('<p style="font-size:16px; color:blue">', analysis.id, '</font></p>', sep=''),
'<p><b><i>RNA-seq 2G</i></b> has finished the analysis above.</p>',
'<p>Go to <a href="http://rnaseq2g.awsomics.org">http://rnaseq2g.awsomics.org</a>, open the <b>[Result]</b> page, and enter the analysis ID to load results.</p>'
);
body <- paste(body, collapse='\n');
send.mail(from = user.name, to = mail.to, subject=subject, body = body, html = TRUE, authenticate = TRUE, send = TRUE,
smtp = list(host.name = host.name, port = port, user.name = user.name, passwd = password, ssl = TRUE));
}
rnaseq2g.send.email('zhangz@email.chop.edu', 'abc')
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
rnaseq2g.send.email <- function(mail.to, analysis.id) {
require(mailR)
host.name    <- "smtp.gmail.com";
user.name    <- "txofmitodys@gmail.com";
password     <- "GSE42986";
port         <- 587; #587 25 465
ssl          <- TRUE;
authenticate <- TRUE;
subject <- "[No Reply] RNA-seq 2G analysis is done."
body <- c(
paste('<p style="font-size:16px; color:blue">', analysis.id, '</font></p>', sep=''),
'<p><b><i>RNA-seq 2G</i></b> has finished the analysis above.</p>',
'<p>Go to <a href="http://rnaseq2g.awsomics.org">http://rnaseq2g.awsomics.org</a>, open the <b>[Result]</b> page, and enter the analysis ID to load results.</p>'
);
body <- paste(body, collapse='\n');
send.mail(from = user.name, to = mail.to, subject=subject, body = body, html = TRUE, authenticate = TRUE, send = TRUE,
smtp = list(host.name = host.name, port = port, user.name = user.name, passwd = password, ssl = TRUE));
}
rnaseq2g.send.email('zhangz@email.chop.edu', 'abc')
rnaseq2g.send.email <- function(mail.to, analysis.id) {
require(mailR)
host.name    <- "smtp.gmail.com";
user.name    <- "txofmitodys@gmail.com";
password     <- "GSE42986";
port         <- 587; #587 25 465
ssl          <- TRUE;
authenticate <- FALSE;
subject <- "[No Reply] RNA-seq 2G analysis is done."
body <- c(
paste('<p style="font-size:16px; color:blue">', analysis.id, '</font></p>', sep=''),
'<p><b><i>RNA-seq 2G</i></b> has finished the analysis above.</p>',
'<p>Go to <a href="http://rnaseq2g.awsomics.org">http://rnaseq2g.awsomics.org</a>, open the <b>[Result]</b> page, and enter the analysis ID to load results.</p>'
);
body <- paste(body, collapse='\n');
send.mail(from = user.name, to = mail.to, subject=subject, body = body, html = TRUE, authenticate = TRUE, send = TRUE,
smtp = list(host.name = host.name, port = port, user.name = user.name, passwd = password, ssl = TRUE));
}
rnaseq2g.send.email('zhangz@email.chop.edu', 'abc')
div(style="display: inline-block;", htmlOutput("analysis.id.message"))
runApp()
runApp()
runApp()
q()
q()
